#!/bin/bash
# ======================================================================================================================
# Tools - IDE - Migrate databases
# ======================================================================================================================

PROJECT_PATH=$(dirname "$(dirname "$(dirname "$0")")")
cd "${PROJECT_PATH}" || exit

# >>>> Abstract

if [ -f ${PROJECT_PATH}/scripts/base/_abstract.sh ]; then
  source ${PROJECT_PATH}/scripts/base/_abstract.sh
else
  echo "Please check a file : ${PROJECT_PATH}/scripts/base/_abstract.sh" && exit
fi

# ----------------------------------------------------------------------------------------------------------------------
# System Architecture
# ----------------------------------------------------------------------------------------------------------------------

# >>>> Environment

setEnvironment() {
  echo "---------------------------------------------------------------------------------------------------------------"
  echo "[ ENV ] ${PROCESSOR_TYPE} - ${PLATFORM_TYPE} - Environment"
  echo "---------------------------------------------------------------------------------------------------------------"
  echo

  # >>>> Import a project file
  if [ -f ${PROJECT_PATH}/scripts/base/_environment.sh ]; then
    source ${PROJECT_PATH}/scripts/base/_environment.sh
  else
    echo "Please check a file : ${PROJECT_PATH}/scripts/base/_environment.sh" && exit
  fi
}

# >>>> Platform

setPlatform() {
  echo "---------------------------------------------------------------------------------------------------------------"
  echo "[ $(echo ${ENVIRONMENT_NAME} | tr '[a-z]' '[A-Z]') ] ${PROCESSOR_TYPE} - ${PLATFORM_TYPE} - Platform"
  echo "---------------------------------------------------------------------------------------------------------------"
  echo "- PLATFORM OS : ${PLATFORM_TYPE}"
  echo
}

# >>>> Project

setProject() {
  echo "---------------------------------------------------------------------------------------------------------------"
  echo "[ $(echo ${ENVIRONMENT_NAME} | tr '[a-z]' '[A-Z]') ] ${PROCESSOR_TYPE} - ${PLATFORM_TYPE} - Project"
  echo "---------------------------------------------------------------------------------------------------------------"
  echo "- PROJECT NAME : ${PROJECT_NAME}"
  echo
}

# ----------------------------------------------------------------------------------------------------------------------
# Software Bundles
# ----------------------------------------------------------------------------------------------------------------------

# >>>> App

setPhp() {
  echo "---------------------------------------------------------------------------------------------------------------"
  echo "[ $(echo ${ENVIRONMENT_NAME} | tr '[a-z]' '[A-Z]') ] ${PROCESSOR_TYPE} - ${PLATFORM_TYPE} - App"
  echo "---------------------------------------------------------------------------------------------------------------"
  echo

  # >>>> Migrate
  if [ -d app ]; then
    (
      cd app || return

      # >>>> Symfony Framework
      if [ -f bin/console ]; then

        # >>>> Select one of some environments
        PS3="Menu: "
        select num in "clear" "create" "validate" "update" "migrate" "status" "exit"; do
          case "$REPLY" in
          1)
            DOCTRINE_COMMAND="clear"
            break
            ;;
          2)
            DOCTRINE_COMMAND="create"
            break
            ;;
          3)
            DOCTRINE_COMMAND="validate"
            break
            ;;
          4)
            DOCTRINE_COMMAND="update"
            break
            ;;
          5)
            DOCTRINE_COMMAND="migrate"
            break
            ;;
          6)
            DOCTRINE_COMMAND="status"
            break
            ;;
          7)
            echo "exit()"
            exit
            ;;
          *)
            echo "[ ERROR ] Unknown Command"
            exit
            ;;
          esac
        done
        echo

        # ----------------------------------------------------------------------------------------------------------------
        # 1) Clear
        # ----------------------------------------------------------------------------------------------------------------
        if [ "${DOCTRINE_COMMAND}" == "clear" ]; then
          echo ">>>> Clear: Remove migrations files"
          if [ -d migrations ]; then
            rm -rfv migrations/*
          fi
          echo

          echo ">>>> Clear: Update the current schema into a new single migration"
          php bin/console doctrine:migrations:dump-schema
          echo

          echo ">>>> Clear: Clean Up the Database Tables/Schema"
          php bin/console doctrine:migrations:rollup

        # ----------------------------------------------------------------------------------------------------------------
        # 2) Create
        # ----------------------------------------------------------------------------------------------------------------
        elif [ "${DOCTRINE_COMMAND}" == "create" ]; then
          echo ">>>> Create: Updating the Database Tables/Schema"
          php bin/console doctrine:database:create -c default

        # ----------------------------------------------------------------------------------------------------------------
        # 3) Validate
        # ----------------------------------------------------------------------------------------------------------------
        elif [ "${DOCTRINE_COMMAND}" == "validate" ]; then
          echo ">>>> Check: Updating the Database Tables/Schema"
          symfony console doctrine:schema:validate
          echo

        # ----------------------------------------------------------------------------------------------------------------
        # 4) Schema
        # ----------------------------------------------------------------------------------------------------------------
        elif [ "${DOCTRINE_COMMAND}" == "update" ]; then
          echo ">>>> Create: Updating the Database Tables/Schema"
          php bin/console doctrine:schema:update --em default --force

        # ----------------------------------------------------------------------------------------------------------------
        # 5) Migrate
        # ----------------------------------------------------------------------------------------------------------------
        elif [ "${DOCTRINE_COMMAND}" == "migrate" ]; then
          echo ">>>> Migrate: Updating the Database Tables/Schema"
          php bin/console doctrine:migration:current
          echo

          echo ">>>> Migrate: Updating the Database Tables/Schema"
          php bin/console make:migration
          echo

          echo ">>>> Migrate: Updating the Database Tables/Schema"
          php bin/console doctrine:migration:migrate

        # ----------------------------------------------------------------------------------------------------------------
        # 6) Status
        # ----------------------------------------------------------------------------------------------------------------
        elif [ "${DOCTRINE_COMMAND}" == "status" ]; then
          echo ">>>> Status: Checking the Database Tables/Schema"
          php bin/console doctrine:migrations:status
        fi
        echo

        echo ">>>> Migrations: Check a list"
          php bin/console doctrine:migration:list

      else
        echo "[ ERROR ] There is not a command : app/bin/console"
        exit
      fi
    )
  else
    echo "[ ERROR ] There is not a folder : app"
    setExit
  fi
  echo
}

# >>>> Cache

setRedis() {
  echo "---------------------------------------------------------------------------------------------------------------"
  echo "[ $(echo ${ENVIRONMENT_NAME} | tr '[a-z]' '[A-Z]') ] ${PROCESSOR_TYPE} - ${PLATFORM_TYPE} - Cache"
  echo "---------------------------------------------------------------------------------------------------------------"
}

# >>>> Database

setPostgreSQL() {
  echo "---------------------------------------------------------------------------------------------------------------"
  echo "[ $(echo ${ENVIRONMENT_NAME} | tr '[a-z]' '[A-Z]') ] ${PROCESSOR_TYPE} - ${PLATFORM_TYPE} - Database"
  echo "---------------------------------------------------------------------------------------------------------------"
}

# >>>> Message

setRabbitMQ() {
  echo "---------------------------------------------------------------------------------------------------------------"
  echo "[ $(echo ${ENVIRONMENT_NAME} | tr '[a-z]' '[A-Z]') ] ${PROCESSOR_TYPE} - ${PLATFORM_TYPE} - Message"
  echo "---------------------------------------------------------------------------------------------------------------"
}

# >>>> Server

setNginx() {
  echo "---------------------------------------------------------------------------------------------------------------"
  echo "[ $(echo ${ENVIRONMENT_NAME} | tr '[a-z]' '[A-Z]') ] ${PROCESSOR_TYPE} - ${PLATFORM_TYPE} - Server"
  echo "---------------------------------------------------------------------------------------------------------------"
}

# ----------------------------------------------------------------------------------------------------------------------
# Content Delivery
# ----------------------------------------------------------------------------------------------------------------------

setCDN() {
  echo "---------------------------------------------------------------------------------------------------------------"
  echo "[ $(echo ${ENVIRONMENT_NAME} | tr '[a-z]' '[A-Z]') ] ${PROCESSOR_TYPE} - ${PLATFORM_TYPE} - Scripts - CDN"
  echo "---------------------------------------------------------------------------------------------------------------"
}

# ----------------------------------------------------------------------------------------------------------------------
# Container
# ----------------------------------------------------------------------------------------------------------------------

setDocker() {
  echo "---------------------------------------------------------------------------------------------------------------"
  echo "[ $(echo ${ENVIRONMENT_NAME} | tr '[a-z]' '[A-Z]') ] ${PROCESSOR_TYPE} - ${PLATFORM_TYPE} - Scripts - Docker"
  echo "---------------------------------------------------------------------------------------------------------------"
}

# ----------------------------------------------------------------------------------------------------------------------
# Instance
# ----------------------------------------------------------------------------------------------------------------------

setVM() {
  echo "---------------------------------------------------------------------------------------------------------------"
  echo "[ $(echo ${ENVIRONMENT_NAME} | tr '[a-z]' '[A-Z]') ] ${PROCESSOR_TYPE} - ${PLATFORM_TYPE} - Scripts - VM"
  echo "---------------------------------------------------------------------------------------------------------------"
}

# ======================================================================================================================
# START
# ======================================================================================================================

# >>>> Start
setStart

# ----------------------------------------------------------------------------------------------------------------------
# System Architecture
# ----------------------------------------------------------------------------------------------------------------------

# >>>> Environment
setEnvironment

# >>>> Platform
setPlatform

# >>>> Project
setProject

# ----------------------------------------------------------------------------------------------------------------------
# Software Bundles
# ----------------------------------------------------------------------------------------------------------------------

# >>>> App
setPhp

# >>>> Cache
#setRedis

# >>>> Database
#setPostgreSQL

# >>>> Message
#setRabbitMQ

# >>>> Server
#setNginx

# ----------------------------------------------------------------------------------------------------------------------
# Content Delivery
# ----------------------------------------------------------------------------------------------------------------------
#setCDN

# ----------------------------------------------------------------------------------------------------------------------
# Container
# ----------------------------------------------------------------------------------------------------------------------
#setDocker

# ----------------------------------------------------------------------------------------------------------------------
# Instance
# ----------------------------------------------------------------------------------------------------------------------
#setVM

# ======================================================================================================================
# END
# ======================================================================================================================

# >>>> End
setEnd
