# ======================================================================================================================
# Docker - Docker-Compose                                                   https://docs.docker.com/compose/compose-file
# ======================================================================================================================
# >>>> Dev Environment
services:
  # --------------------------------------------------------------------------------------------------------------------
  # App                                                                                     https://hub.docker.com/_/php
  # --------------------------------------------------------------------------------------------------------------------
  # >>>> PHP - Symfony Framework

  # --------------------------------------------------------------------------------------------------------------------
  # Cache                                                                                 https://hub.docker.com/_/redis
  # --------------------------------------------------------------------------------------------------------------------
  # >>>> Redis
  #redis:
  #  container_name: ${DOCKER_CONTAINER_NAME}_redis_in_${DOCKER_ENVIRONMENT}
  #  build:
  #    context: .
  #    dockerfile: scripts/docker/containers/cache/redis/Dockerfile_${DOCKER_ENVIRONMENT}
  #    args:
  #      - REDIS_VERSION=${REDIS_VERSION}
  #  env_file:
  #    - scripts/docker/containers/cache/redis/.env
  #    - scripts/docker/containers/cache/redis/.env.${DOCKER_ENVIRONMENT}
  #  networks:
  #    back-end:
  #      ipv4_address: ${REDIS_NETWORK_BACKEND_IP_ADDRESS}
  #  expose:
  #    - 6379/tcp
  #  ports:
  #    - ${REDIS_NETWORK_PORT}:6379
  #  healthcheck:
  #    test: ["CMD", "redis-cli", "ping"]
  #    interval: 10s
  #    timeout: 5s
  #    retries: 3
  #  deploy:
  #    resources:
  #      limits:
  #        cpus: '0.80'
  #        memory: 1024M
  #      reservations:
  #        memory: 512M
  #  restart: always
  # --------------------------------------------------------------------------------------------------------------------
  # Database                                                                           https://hub.docker.com/_/postgres
  # --------------------------------------------------------------------------------------------------------------------
  # >>>> PostgreSQL
  postgres:
    container_name: ${DOCKER_CONTAINER_NAME}_postgres_in_${DOCKER_ENVIRONMENT}
    image: postgres:${POSTGRES_VERSION:-16}
    #build:
    #  context: .
    #  dockerfile: scripts/docker/containers/database/postgres/Dockerfile_${DOCKER_ENVIRONMENT}
    #  args:
    #    - POSTGRES_VERSION=${POSTGRES_VERSION}
    env_file:
      - scripts/docker/containers/database/postgres/.env.${DOCKER_ENVIRONMENT}
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-app}
      - POSTGRES_USER=${POSTGRES_USER:-symfony}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-!ChangeMe!}
      - POSTGRES_HOST_AUTH_METHOD=trust
    networks:
      back-end:
        ipv4_address: ${POSTGRES_NETWORK_BACKEND_IP_ADDRESS}
    expose:
      - 5432/tcp
    ports:
      - ${POSTGRES_NETWORK_PORT}:5432
    healthcheck:
      test: [ "CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-symfony}" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    volumes:
      - type: volume
        source: postgres_volume
        target: /var/lib/postgres/data
        volume:
          nocopy: true
    labels:
      com.symfony.server.service-prefix: 'DATABASE'
    deploy:
      resources:
        limits:
          cpus: '0.80'
          memory: 2048M
        reservations:
          memory: 1024M
    restart: unless-stopped
  # --------------------------------------------------------------------------------------------------------------------
  # Message                                                                            https://hub.docker.com/_/rabbitmq
  # --------------------------------------------------------------------------------------------------------------------
  # >>>> RabbitMQ
  #rabbitmq:
  #  container_name: ${DOCKER_CONTAINER_NAME}_rabbitmq_in_${DOCKER_ENVIRONMENT}
  #  build:
  #    context: .
  #    dockerfile: scripts/docker/containers/message/rabbitmq/Dockerfile_${DOCKER_ENVIRONMENT}
  #    args:
  #      - RABBITMQ_VERSION=${RABBITMQ_VERSION}
  #  env_file:
  #    - scripts/docker/containers/message/rabbitmq/.env
  #    - scripts/docker/containers/message/rabbitmq/.env.${DOCKER_ENVIRONMENT}
  #  networks:
  #    back-end:
  #      ipv4_address: ${RABBITMQ_NETWORK_BACKEND_IP_ADDRESS}
  #  expose:
  #    - 5672/tcp
  #    - 15672/tcp
  #  ports:
  #    - ${RABBITMQ_NETWORK_PORT}:5672
  #  restart: always
  # --------------------------------------------------------------------------------------------------------------------
  # Server                                                                                https://hub.docker.com/_/nginx
  # --------------------------------------------------------------------------------------------------------------------
  # >>>> Nginx

  # --------------------------------------------------------------------------------------------------------------------
  # Tools
  # --------------------------------------------------------------------------------------------------------------------
  # >>>> PgAdmin
  pgadmin:
    container_name: ${DOCKER_CONTAINER_NAME}_pgadmin_in_${DOCKER_ENVIRONMENT}
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_MAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PW}
    networks:
      front-end:
        ipv4_address: ${PGADMIN_NETWORK_FRONTEND_IP_ADDRESS}
      back-end:
        ipv4_address: ${PGADMIN_NETWORK_BACKEND_IP_ADDRESS}
    expose:
      - 80/tcp
    ports:
      - ${PGADMIN_NETWORK_PORT}:80
    restart: unless-stopped

  # >>>> Mailer
  mailer:
    container_name: ${DOCKER_CONTAINER_NAME}_mailer_in_${DOCKER_ENVIRONMENT}
    image: schickling/mailcatcher
    networks:
      back-end:
        ipv4_address: ${MAILER_NETWORK_BACKEND_IP_ADDRESS}
    expose:
      - 1080/tcp
      - 1025/tcp
    ports:
      - ${MAILER_NETWORK_HTTP_PORT}:1080
      - ${MAILER_NETWORK_SMTP_PORT}:1025
    deploy:
      resources:
        limits:
          cpus: '0.80'
          memory: 256M
        reservations:
          memory: 128M
    restart: unless-stopped

# ----------------------------------------------------------------------------------------------------------------------
# Networks
# ----------------------------------------------------------------------------------------------------------------------
networks:
  front-end:
    ipam:
      config:
        - subnet: ${DOCKER_NETWORK_FRONTEND_IPAM_CONFIG_SUBNET}
  back-end:
    ipam:
      config:
        - subnet: ${DOCKER_NETWORK_BACKEND_IPAM_CONFIG_SUBNET}
