# ======================================================================================================================
# Dockerfile - PHP                                                                          https://hub.docker.com/_/php
# ======================================================================================================================
ARG PHP_VERSION
ARG PHP_WORKDIR

# ----------------------------------------------------------------------------------------------------------------------
# STEP - 01 : Pull official base image 
# ----------------------------------------------------------------------------------------------------------------------
FROM php:${PHP_VERSION}-fpm

# ----------------------------------------------------------------------------------------------------------------------
# STEP - 02 : Set environment variables
# ----------------------------------------------------------------------------------------------------------------------
RUN echo "[ PHP ] Set environment variables"
# >>>> PHP - Composer
ENV COMPOSER_ALLOW_SUPERUSER=1
ENV PATH="${PATH}:/root/.composer/vendor/bin"
RUN usermod -u 1000 www-data

# ----------------------------------------------------------------------------------------------------------------------
# STEP - 03 : Set Work directory
# ----------------------------------------------------------------------------------------------------------------------
RUN echo "[ PHP ] Set Work directory "
WORKDIR ${PHP_WORKDIR}/app

# ----------------------------------------------------------------------------------------------------------------------
# STEP - 04 : Install packages
# ----------------------------------------------------------------------------------------------------------------------
RUN echo "[ PHP ] Install packages"

# ----------------------------------------------------------------------------------------------------------------------
# Software Bundles
# ----------------------------------------------------------------------------------------------------------------------

# >>>> App
RUN apt-get update && apt-get install -y --no-install-recommends \
        libfreetype-dev \
        libjpeg62-turbo-dev \
        libpng-dev \
        libicu-dev \
        libzip-dev \
        libpq-dev \
        curl

RUN docker-php-ext-configure gd \
        --with-freetype \
        --with-jpeg \
    && docker-php-ext-install \
        -j$(nproc) gd \
        sockets \
        intl \
        zip

# ----------------------------------------------------------------------------------------------------------------------
# Software Bundles
# ----------------------------------------------------------------------------------------------------------------------

# >>>> App - PHP Extention - Xdebug
#RUN pecl install xdebug \
#    && docker-php-ext-enable xdebug

# ----------------------------------------------------------------------------------------------------------------------
# >>>> Cache
#RUN pecl install apcu && docker-php-ext-enable apcu

RUN docker-php-ext-enable opcache

# >>>> Cache - Redis
RUN pecl install redis \
    && docker-php-ext-enable redis

# >>>> Cache - Memcached
#RUN apt-get install -y libmemcached-dev \
#    && pecl install memcached \
#    && docker-php-ext-enable memcached

# ----------------------------------------------------------------------------------------------------------------------
# >>>> Database
RUN docker-php-ext-install pdo

# >>>> Database - MySQL
#RUN docker-php-ext-install pdo_mysql \
#    && docker-php-ext-enable pdo_mysql

# >>>> Database - Postgres
RUN docker-php-ext-install pdo_pgsql \
    && docker-php-ext-enable pdo_pgsql

# >>>> Database - MongoDB                  https://www.mongodb.com/docs/php-library/master/tutorial/install-php-library/
#RUN pecl install mongodb \
#    && docker-php-ext-enable mongodb

# ----------------------------------------------------------------------------------------------------------------------
# >>>> Tools
RUN apt-get clean -y \
    && apt-get autoremove -y \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/* \
    && rm -rf "$(pecl config-get temp_dir)/*" \
    && docker-php-source delete

# ----------------------------------------------------------------------------------------------------------------------
# STEP - 05 : Update configuration
# ----------------------------------------------------------------------------------------------------------------------
RUN echo "[ PHP ] Update a configuration"
# >>>> PHP
RUN rm -f $PHP_INI_DIR/php.ini-*
COPY --link scripts/docker/containers/app/php/etc/php_prod.ini $PHP_INI_DIR/php.ini
COPY --link scripts/docker/containers/app/php/etc/conf.d/docker-php-ext-opcache_prod.ini $PHP_INI_DIR/conf.d/docker-php-ext-opcache.ini
COPY --link scripts/docker/containers/app/php/etc/conf.d/docker-php-ext-xdebug_prod.ini $PHP_INI_DIR/conf.d/docker-php-ext-xdebug.ini

# >>>> PHP-FPM
RUN rm -f /usr/local/etc/php-fpm.conf.default
COPY --link scripts/docker/containers/app/php/etc/php-fpm_prod.conf /usr/local/etc/php-fpm.conf

RUN rm -f /usr/local/etc/php-fpm.d/www.conf
RUN rm -f /usr/local/etc/php-fpm.d/www.conf.default
COPY --link scripts/docker/containers/app/php/etc/php-fpm.d/www_prod.conf /usr/local/etc/php-fpm.d/www.conf

# >>>> PHP - Composer
COPY --link --from=composer:latest /usr/bin/composer /usr/bin/composer

# ----------------------------------------------------------------------------------------------------------------------
# STEP - 06 : Copy source files
# ----------------------------------------------------------------------------------------------------------------------
RUN echo "[ PHP ] Prevent the re-installation of vendors"
COPY --link ./app/composer.* ./
COPY --link ./app/symfony.* ./
RUN set -eux; \
	composer install --no-cache --prefer-dist --no-dev --no-autoloader --no-scripts --no-progress

RUN echo "[ PHP ] Copy source files"
COPY --link --chown=www-data:www-data ./app ./

RUN echo "[ PHP ] Update some permission for log files"
RUN mkdir -p ${PHP_WORKDIR}/app/var
RUN mkdir -p ${PHP_WORKDIR}/app/var/cache;
RUN mkdir -p ${PHP_WORKDIR}/app/var/log;
RUN mkdir -p ${PHP_WORKDIR}/app/var/sessions;
RUN mkdir -p ${PHP_WORKDIR}/app/var/translations;
RUN chmod -R 777 ${PHP_WORKDIR}/app/var
RUN chown -R www-data ${PHP_WORKDIR}/app/var

RUN	composer dump-autoload --classmap-authoritative --no-dev;
RUN	composer dump-env prod;
RUN	composer run-script --no-dev post-install-cmd;
RUN	chmod +x bin/console; sync;

# ----------------------------------------------------------------------------------------------------------------------
# STEP - 07 : Start the service
# ----------------------------------------------------------------------------------------------------------------------
RUN echo "[ PHP ] Start the service"