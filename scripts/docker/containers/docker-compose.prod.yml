# ======================================================================================================================
# Docker - Docker-Compose                                                   https://docs.docker.com/compose/compose-file
# ======================================================================================================================
# >>>> Prod Environment
services:
  # --------------------------------------------------------------------------------------------------------------------
  # App                                                                                     https://hub.docker.com/_/php
  # --------------------------------------------------------------------------------------------------------------------
  # >>>> PHP - Symfony Framework
  php:
    container_name: ${DOCKER_CONTAINER_NAME}_php_in_${DOCKER_ENVIRONMENT}
    build:
      context: .
      dockerfile: scripts/docker/containers/app/php/Dockerfile_${DOCKER_ENVIRONMENT}
      args:
        - PHP_VERSION=${PHP_VERSION}
        - PHP_WORKDIR=${DOCKER_WORKDIR}
    env_file:
      - .env.${DOCKER_ENVIRONMENT}
      - scripts/docker/containers/app/php/.env
      - scripts/docker/containers/app/php/.env.${DOCKER_ENVIRONMENT}
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - POSTGRES_VERSION=${POSTGRES_VERSION}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER:-symfony}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-!ChangeMe!}
      # >>>> PhpStorm Menu: File / Settings / PHP / Servers / Name: localhost
      #- XDEBUG_CONFIG=idekey=PHPSTORM
      #- PHP_IDE_CONFIG=serverName=localhost
    networks:
      back-end:
        ipv4_address: ${PHP_NETWORK_BACKEND_IP_ADDRESS}
    expose:
      - 9000/tcp
      - 9001/tcp
      # >>>> PhpStorm Menu: File / Settings / PHP / Debug / Xdebug / Debug port ----> docker-php-ext-xdebug-mode.ini
      #- 9003/tcp
    extra_hosts:
      # >>>> PhpStorm Menu: File / Settings / PHP / Debug / Xdebug / Debug port
      - host.docker.internal:host-gateway
    volumes:
      - type: bind
        source: app
        target: ${DOCKER_WORKDIR}/app
    depends_on:
      - redis
      - postgres
      - rabbitmq
      - nginx
    deploy:
      resources:
        limits:
          cpus: '0.80'
          memory: 1024M
        reservations:
          memory: 512M
    tty: true
    restart: always
  # --------------------------------------------------------------------------------------------------------------------
  # Cache                                                                                 https://hub.docker.com/_/redis
  # --------------------------------------------------------------------------------------------------------------------
  # >>>> Redis
  redis:
    container_name: ${DOCKER_CONTAINER_NAME}_redis_in_${DOCKER_ENVIRONMENT}
    build:
      context: .
      dockerfile: scripts/docker/containers/cache/redis/Dockerfile_${DOCKER_ENVIRONMENT}
      args:
        - REDIS_VERSION=${REDIS_VERSION}
    env_file:
      - scripts/docker/containers/cache/redis/.env
      - scripts/docker/containers/cache/redis/.env.${DOCKER_ENVIRONMENT}
    networks:
      back-end:
        ipv4_address: ${REDIS_NETWORK_BACKEND_IP_ADDRESS}
    expose:
      - 6379/tcp
    ports:
      - ${REDIS_NETWORK_PORT}:6379
    deploy:
      resources:
        limits:
          cpus: '0.80'
          memory: 1024M
        reservations:
          memory: 512M
    restart: always
  # --------------------------------------------------------------------------------------------------------------------
  # Database                                                                           https://hub.docker.com/_/postgres
  # --------------------------------------------------------------------------------------------------------------------
  # >>>> PostgreSQL
  postgres:
    container_name: ${DOCKER_CONTAINER_NAME}_postgres_in_${DOCKER_ENVIRONMENT}
    build:
      context: .
      dockerfile: scripts/docker/containers/database/postgres/Dockerfile_${DOCKER_ENVIRONMENT}
      args:
        - POSTGRES_VERSION=${POSTGRES_VERSION}
    env_file:
      - scripts/docker/containers/database/postgres/.env.${DOCKER_ENVIRONMENT}
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-app}
      - POSTGRES_USER=${POSTGRES_USER:-symfony}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-!ChangeMe!}
      - POSTGRES_HOST_AUTH_METHOD=trust
    networks:
      back-end:
        ipv4_address: ${POSTGRES_NETWORK_BACKEND_IP_ADDRESS}
    ports:
      - ${POSTGRES_NETWORK_PORT}:5432
    healthcheck:
      test: [ "CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-symfony}" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.80'
          memory: 2048M
        reservations:
          memory: 1024M
    restart: unless-stopped
  # --------------------------------------------------------------------------------------------------------------------
  # Message                                                                            https://hub.docker.com/_/rabbitmq
  # --------------------------------------------------------------------------------------------------------------------
  # >>>> RabbitMQ
  rabbitmq:
    container_name: ${DOCKER_CONTAINER_NAME}_rabbitmq_in_${DOCKER_ENVIRONMENT}
    build:
      context: .
      dockerfile: scripts/docker/containers/message/rabbitmq/Dockerfile_${DOCKER_ENVIRONMENT}
      args:
        - RABBITMQ_VERSION=${RABBITMQ_VERSION}
    env_file:
      - scripts/docker/containers/message/rabbitmq/.env
      - scripts/docker/containers/message/rabbitmq/.env.${DOCKER_ENVIRONMENT}
    networks:
      back-end:
        ipv4_address: ${RABBITMQ_NETWORK_BACKEND_IP_ADDRESS}
    expose:
      - 5672/tcp
      - 15672/tcp
    ports:
      - ${RABBITMQ_NETWORK_PORT}:5672
    restart: always
  # --------------------------------------------------------------------------------------------------------------------
  # Server                                                                                https://hub.docker.com/_/nginx
  # --------------------------------------------------------------------------------------------------------------------
  # >>>> Nginx
  nginx:
    container_name: ${DOCKER_CONTAINER_NAME}_nginx_in_${DOCKER_ENVIRONMENT}
    build:
      context: .
      dockerfile: scripts/docker/containers/server/nginx/Dockerfile_${DOCKER_ENVIRONMENT}
      args:
        - NGINX_VERSION=${NGINX_VERSION}
      shm_size: 2gb
    env_file:
      - scripts/docker/containers/server/nginx/.env
      - scripts/docker/containers/server/nginx/.env.${DOCKER_ENVIRONMENT}
    networks:
      front-end:
        ipv4_address: ${NGINX_NETWORK_FRONTEND_IP_ADDRESS}
      back-end:
        ipv4_address: ${NGINX_NETWORK_BACKEND_IP_ADDRESS}
    expose:
      - 80/tcp
    ports:
      - ${NGINX_NETWORK_PORT}:80
    volumes:
      - type: bind
        source: app/public
        target: ${DOCKER_WORKDIR}/app/public
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://127.0.0.1:${NGINX_PORT}/${NGINX_HEALTHCHECK_FILE}" ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.80'
          memory: 2048M
        reservations:
          memory: 1024M
    restart: always
  # --------------------------------------------------------------------------------------------------------------------
  # Tools
  # --------------------------------------------------------------------------------------------------------------------
  # >>>> PgAdmin

  # >>>> Mailer

# ----------------------------------------------------------------------------------------------------------------------
# Networks
# ----------------------------------------------------------------------------------------------------------------------
networks:
  front-end:
    ipam:
      config:
        - subnet: ${DOCKER_NETWORK_FRONTEND_IPAM_CONFIG_SUBNET}
  back-end:
    ipam:
      config:
        - subnet: ${DOCKER_NETWORK_BACKEND_IPAM_CONFIG_SUBNET}
